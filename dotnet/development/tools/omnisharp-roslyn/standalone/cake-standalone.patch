diff --git a/build.json b/build.json
index e6fbba2f..9afcbeec 100644
--- a/build.json
+++ b/build.json
@@ -7,7 +7,7 @@
   ],
   "LegacyDotNetVersion": "1.0.0-preview2-1-003177",
   "RequiredMonoVersion": "5.18.0.0",
-  "DownloadURL": "https://roslynomnisharp.blob.core.windows.net/ext",
+  "DownloadURL": "nixos",
   "MonoRuntimeMacOS": "mono.macOS-5.18.1.0.zip",
   "MonoRuntimeLinux32": "mono.linux-x86-5.18.1.0.zip",
   "MonoRuntimeLinux64": "mono.linux-x86_64-5.18.1.0.zip",
diff --git a/scripts/common.cake b/scripts/common.cake
index 5ccd4ffb..afab4c7a 100644
--- a/scripts/common.cake
+++ b/scripts/common.cake
@@ -1,5 +1,4 @@
 #addin "nuget:?package=Newtonsoft.Json&version=11.0.2"
-#tool "nuget:?package=GitVersion.CommandLine&prerelease&version=5.0.0-beta2-65"
 
 #load "platform.cake"
 
@@ -113,20 +112,13 @@ string CombinePaths(params string[] paths)
     return PathHelper.Combine(paths);
 }
 
-void DownloadFileAndUnzip(string url, string folder)
+void DownloadFileAndUnzip(string zipFileName, string folder)
 {
     DirectoryHelper.ForceCreate(folder);
-    var zipFileName = CombinePaths(folder, "temp.zip");
 
-    Information("Downloading {0}", url);
-
-    using (var client = new WebClient())
-    {
-        client.DownloadFile(url, zipFileName);
-    }
+    Information("Extracting {0}", zipFileName);
 
     Unzip(zipFileName, folder);
-    FileHelper.Delete(zipFileName);
 }
 
 public class Folders
diff --git a/scripts/platform.cake b/scripts/platform.cake
index f0cf338d..97884b44 100644
--- a/scripts/platform.cake
+++ b/scripts/platform.cake
@@ -82,9 +82,9 @@ public sealed class Platform
                 var versionText = RunAndCaptureOutput("sw_vers", "-productVersion");
                 return new Platform(os, architecture, new Version(versionText));
             case "Linux":
-                string distroName;
-                Version version;
-                ReadDistroNameAndVersion(out distroName, out version);
+                string distroName = "nixos";
+                Version version = new Version();
+                //ReadDistroNameAndVersion(out distroName, out version);
 
                 return new Platform(os, architecture, version, distroName);
             default:
